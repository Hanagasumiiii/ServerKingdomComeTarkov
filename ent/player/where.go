// Code generated by ent, DO NOT EDIT.

package player

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Hanagasumiiii/ServerKingdomComeTarkov/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldID, id))
}

// Mana applies equality check predicate on the "mana" field. It's identical to ManaEQ.
func Mana(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldMana, v))
}

// Hp applies equality check predicate on the "hp" field. It's identical to HpEQ.
func Hp(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldHp, v))
}

// PositionX applies equality check predicate on the "position_x" field. It's identical to PositionXEQ.
func PositionX(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPositionX, v))
}

// PositionY applies equality check predicate on the "position_y" field. It's identical to PositionYEQ.
func PositionY(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPositionY, v))
}

// PositionZ applies equality check predicate on the "position_z" field. It's identical to PositionZEQ.
func PositionZ(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPositionZ, v))
}

// ManaEQ applies the EQ predicate on the "mana" field.
func ManaEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldMana, v))
}

// ManaNEQ applies the NEQ predicate on the "mana" field.
func ManaNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldMana, v))
}

// ManaIn applies the In predicate on the "mana" field.
func ManaIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldMana, vs...))
}

// ManaNotIn applies the NotIn predicate on the "mana" field.
func ManaNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldMana, vs...))
}

// ManaGT applies the GT predicate on the "mana" field.
func ManaGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldMana, v))
}

// ManaGTE applies the GTE predicate on the "mana" field.
func ManaGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldMana, v))
}

// ManaLT applies the LT predicate on the "mana" field.
func ManaLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldMana, v))
}

// ManaLTE applies the LTE predicate on the "mana" field.
func ManaLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldMana, v))
}

// HpEQ applies the EQ predicate on the "hp" field.
func HpEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldHp, v))
}

// HpNEQ applies the NEQ predicate on the "hp" field.
func HpNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldHp, v))
}

// HpIn applies the In predicate on the "hp" field.
func HpIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldHp, vs...))
}

// HpNotIn applies the NotIn predicate on the "hp" field.
func HpNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldHp, vs...))
}

// HpGT applies the GT predicate on the "hp" field.
func HpGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldHp, v))
}

// HpGTE applies the GTE predicate on the "hp" field.
func HpGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldHp, v))
}

// HpLT applies the LT predicate on the "hp" field.
func HpLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldHp, v))
}

// HpLTE applies the LTE predicate on the "hp" field.
func HpLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldHp, v))
}

// PositionXEQ applies the EQ predicate on the "position_x" field.
func PositionXEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPositionX, v))
}

// PositionXNEQ applies the NEQ predicate on the "position_x" field.
func PositionXNEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPositionX, v))
}

// PositionXIn applies the In predicate on the "position_x" field.
func PositionXIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPositionX, vs...))
}

// PositionXNotIn applies the NotIn predicate on the "position_x" field.
func PositionXNotIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPositionX, vs...))
}

// PositionXGT applies the GT predicate on the "position_x" field.
func PositionXGT(v float64) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPositionX, v))
}

// PositionXGTE applies the GTE predicate on the "position_x" field.
func PositionXGTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPositionX, v))
}

// PositionXLT applies the LT predicate on the "position_x" field.
func PositionXLT(v float64) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPositionX, v))
}

// PositionXLTE applies the LTE predicate on the "position_x" field.
func PositionXLTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPositionX, v))
}

// PositionYEQ applies the EQ predicate on the "position_y" field.
func PositionYEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPositionY, v))
}

// PositionYNEQ applies the NEQ predicate on the "position_y" field.
func PositionYNEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPositionY, v))
}

// PositionYIn applies the In predicate on the "position_y" field.
func PositionYIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPositionY, vs...))
}

// PositionYNotIn applies the NotIn predicate on the "position_y" field.
func PositionYNotIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPositionY, vs...))
}

// PositionYGT applies the GT predicate on the "position_y" field.
func PositionYGT(v float64) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPositionY, v))
}

// PositionYGTE applies the GTE predicate on the "position_y" field.
func PositionYGTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPositionY, v))
}

// PositionYLT applies the LT predicate on the "position_y" field.
func PositionYLT(v float64) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPositionY, v))
}

// PositionYLTE applies the LTE predicate on the "position_y" field.
func PositionYLTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPositionY, v))
}

// PositionZEQ applies the EQ predicate on the "position_z" field.
func PositionZEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPositionZ, v))
}

// PositionZNEQ applies the NEQ predicate on the "position_z" field.
func PositionZNEQ(v float64) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPositionZ, v))
}

// PositionZIn applies the In predicate on the "position_z" field.
func PositionZIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPositionZ, vs...))
}

// PositionZNotIn applies the NotIn predicate on the "position_z" field.
func PositionZNotIn(vs ...float64) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPositionZ, vs...))
}

// PositionZGT applies the GT predicate on the "position_z" field.
func PositionZGT(v float64) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldPositionZ, v))
}

// PositionZGTE applies the GTE predicate on the "position_z" field.
func PositionZGTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldPositionZ, v))
}

// PositionZLT applies the LT predicate on the "position_z" field.
func PositionZLT(v float64) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldPositionZ, v))
}

// PositionZLTE applies the LTE predicate on the "position_z" field.
func PositionZLTE(v float64) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldPositionZ, v))
}

// InventoryIsNil applies the IsNil predicate on the "inventory" field.
func InventoryIsNil() predicate.Player {
	return predicate.Player(sql.FieldIsNull(FieldInventory))
}

// InventoryNotNil applies the NotNil predicate on the "inventory" field.
func InventoryNotNil() predicate.Player {
	return predicate.Player(sql.FieldNotNull(FieldInventory))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Player) predicate.Player {
	return predicate.Player(sql.NotPredicates(p))
}
