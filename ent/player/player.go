// Code generated by ent, DO NOT EDIT.

package player

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMana holds the string denoting the mana field in the database.
	FieldMana = "mana"
	// FieldHp holds the string denoting the hp field in the database.
	FieldHp = "hp"
	// FieldPositionX holds the string denoting the position_x field in the database.
	FieldPositionX = "position_x"
	// FieldPositionY holds the string denoting the position_y field in the database.
	FieldPositionY = "position_y"
	// FieldPositionZ holds the string denoting the position_z field in the database.
	FieldPositionZ = "position_z"
	// FieldInventory holds the string denoting the inventory field in the database.
	FieldInventory = "inventory"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the player in the database.
	Table = "players"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "players"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_player"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldMana,
	FieldHp,
	FieldPositionX,
	FieldPositionY,
	FieldPositionZ,
	FieldInventory,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_player",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMana holds the default value on creation for the "mana" field.
	DefaultMana int
	// DefaultHp holds the default value on creation for the "hp" field.
	DefaultHp int
	// DefaultPositionX holds the default value on creation for the "position_x" field.
	DefaultPositionX float64
	// DefaultPositionY holds the default value on creation for the "position_y" field.
	DefaultPositionY float64
	// DefaultPositionZ holds the default value on creation for the "position_z" field.
	DefaultPositionZ float64
)

// OrderOption defines the ordering options for the Player queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMana orders the results by the mana field.
func ByMana(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMana, opts...).ToFunc()
}

// ByHp orders the results by the hp field.
func ByHp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHp, opts...).ToFunc()
}

// ByPositionX orders the results by the position_x field.
func ByPositionX(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionX, opts...).ToFunc()
}

// ByPositionY orders the results by the position_y field.
func ByPositionY(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionY, opts...).ToFunc()
}

// ByPositionZ orders the results by the position_z field.
func ByPositionZ(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionZ, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
