// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Hanagasumiiii/ServerKingdomComeTarkov/ent/player"
	"github.com/Hanagasumiiii/ServerKingdomComeTarkov/ent/user"
)

// Player is the model entity for the Player schema.
type Player struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Мана игрока
	Mana int `json:"mana,omitempty"`
	// HP игрока
	Hp int `json:"hp,omitempty"`
	// Позиция X
	PositionX float64 `json:"position_x,omitempty"`
	// Позиция Y
	PositionY float64 `json:"position_y,omitempty"`
	// Позиция Z
	PositionZ float64 `json:"position_z,omitempty"`
	// Инвентарь игрока
	Inventory []string `json:"inventory,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerQuery when eager-loading is set.
	Edges        PlayerEdges `json:"edges"`
	user_player  *int
	selectValues sql.SelectValues
}

// PlayerEdges holds the relations/edges for other nodes in the graph.
type PlayerEdges struct {
	// Связь с User
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Player) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case player.FieldInventory:
			values[i] = new([]byte)
		case player.FieldPositionX, player.FieldPositionY, player.FieldPositionZ:
			values[i] = new(sql.NullFloat64)
		case player.FieldID, player.FieldMana, player.FieldHp:
			values[i] = new(sql.NullInt64)
		case player.ForeignKeys[0]: // user_player
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Player fields.
func (pl *Player) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case player.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case player.FieldMana:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mana", values[i])
			} else if value.Valid {
				pl.Mana = int(value.Int64)
			}
		case player.FieldHp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hp", values[i])
			} else if value.Valid {
				pl.Hp = int(value.Int64)
			}
		case player.FieldPositionX:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field position_x", values[i])
			} else if value.Valid {
				pl.PositionX = value.Float64
			}
		case player.FieldPositionY:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field position_y", values[i])
			} else if value.Valid {
				pl.PositionY = value.Float64
			}
		case player.FieldPositionZ:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field position_z", values[i])
			} else if value.Valid {
				pl.PositionZ = value.Float64
			}
		case player.FieldInventory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field inventory", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Inventory); err != nil {
					return fmt.Errorf("unmarshal field inventory: %w", err)
				}
			}
		case player.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_player", value)
			} else if value.Valid {
				pl.user_player = new(int)
				*pl.user_player = int(value.Int64)
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Player.
// This includes values selected through modifiers, order, etc.
func (pl *Player) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Player entity.
func (pl *Player) QueryUser() *UserQuery {
	return NewPlayerClient(pl.config).QueryUser(pl)
}

// Update returns a builder for updating this Player.
// Note that you need to call Player.Unwrap() before calling this method if this Player
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Player) Update() *PlayerUpdateOne {
	return NewPlayerClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Player entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Player) Unwrap() *Player {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Player is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Player) String() string {
	var builder strings.Builder
	builder.WriteString("Player(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("mana=")
	builder.WriteString(fmt.Sprintf("%v", pl.Mana))
	builder.WriteString(", ")
	builder.WriteString("hp=")
	builder.WriteString(fmt.Sprintf("%v", pl.Hp))
	builder.WriteString(", ")
	builder.WriteString("position_x=")
	builder.WriteString(fmt.Sprintf("%v", pl.PositionX))
	builder.WriteString(", ")
	builder.WriteString("position_y=")
	builder.WriteString(fmt.Sprintf("%v", pl.PositionY))
	builder.WriteString(", ")
	builder.WriteString("position_z=")
	builder.WriteString(fmt.Sprintf("%v", pl.PositionZ))
	builder.WriteString(", ")
	builder.WriteString("inventory=")
	builder.WriteString(fmt.Sprintf("%v", pl.Inventory))
	builder.WriteByte(')')
	return builder.String()
}

// Players is a parsable slice of Player.
type Players []*Player
